#This is a example on how a settings file for the atafut software can look like
#It will have to be adjusted for specific use cases, especially the tracing parameters will have to be changed to ensure optimal performance
#Comments are inserted after the "#" character.

#the set_scale command allows you to scale specific input parameters as well as all output of atafut.
#Here the unit "nm" is defined and all output will be in this unit or in nmÂ². atafut will from this command automatically figure out that 1 pixel corresponds to 3.333 nm. After this command was called, all parameters relating to length can be given in "nm" when they are followed by the unit "nm" after a whitespace. So the input "2.4" will have the same effect as "8 nm".
#set_scale 300 px = 1000 nm


#The threads keyword defines the number of threads used by the programm for its computations. For the best performance use the number of physical threads in your processor.
#threads 8


#The tracing parameters that can be specified are "sigma_smooth", "sigma_conv", "r_min", "r_max", "steps", "thresh", "r_step" and "min_loop_length". Guidelines on how to choose them and their exact function is described in the choosing_parameters.pdf. Here only the briefest of descriptions is given. The parameters that have to be specified are: "sigma_smooth", "sigma_conv", "r_max" and "r_step", all others have default values. The parameters are specified by the parameter name followed by a whitespace and the value that is to be assigned to it. They can only be specified once. Only the parameters relating to length that scale with the image can be set using the unit from the "set_scale" command. The parameters given here as a example were used to trace actin fibers in SEM images where the fibers were approximately 4 pixels thick.

#Since some parameters are specified relative to the fiber diameter, here the set_scale command is used to easily adjust these parameters to the scale of the image. Simple fill in how many pixel thick the fibers are in your image before the word "pixel" in the next command.


set_scale 1 fiber_diameter = 4 pixel


#sigma_smooth does not scale with the image and can therefor not be specified using the unit from set_scale. 0.5 or 0.55 seems to be a sensible value although the extreme range can be between 0.35 and 0.8. The higher this parameter the further apart branches have to be, so increasing it reduces the amount of branches.
sigma_smooth 0.5


#sigma_conf scales with the image. A good value seems to be about half fiber thickness.
sigma_conv 0.45 fiber_diameter

#r_min has a default value of 0 and can savely be kept at this value. It rarely needs to be increased. It scales with the image
r_min 0 fiber_diameter

#r_max scales with the image. a sensible value seems to be twice fiber thickness.
r_max 2 fiber_diameter

#steps does not scale with the image. Its default value is 360. It is only a tradeoff between runtime and angular resolution. The default value provides more than enough angular resolution. This parameter does not really need to be adjusted.
steps 360

#thresh does not scale with the image. Its default value is 0. If there are a lot of unwanted branches perpendicular to the traced fibers, thresh will likely have to be increased carefully. The higher thresh, the less branches. If no tracing takes place, a thresh value that is to high is likely the cause.
thresh 2

#r_step scales with the image. A good value seems to be between once and twice fiber diameter.
r_step 0.75 fiber_diameter

#min_loop_length does not scale with the image. Its default value is 6.
min_loop_length 7



# The crop command can be used to get rid of scale bars or similar features added by the image aquisition system and not part of the fibers that are supposed to be analysed. It can also be used to only trace a smaller portion of the image and therefore more quickly test the parameters.
#crop 0 0 1024 884


#In all paths that the programm will save data or images to, the keyword "<imagename>" can be used. This will be replaced by the name of the image currently beeing analysed.

# The draw commands are there to aid the parameter choise by visualising the tracing result. A arbitrary amount of draw commands can be specified each resulting in the creation of a seperate image. For a more detailed description see the README.md.

draw original network 0 0 255 2 name <imagename>_traced only_loops 255 0 0 1
#draw tubeness


#Startpoints have to be specified in order for any tracing to take place. If this is not done, atafut turns into a fancy image convolution software, since the draw commands still work. Startpoints can be created manually and/or automatically. automatic start point creation is recommended and is activated by the command "auto_startpoints". It takes up to three input parameters that are explained in great detail in the choosing_parameters.pdf or the readme.md. The short version is: 1. number of startpoints(default = 100), 2. minimum distance between startpoints (default = 20*r_step), 3. threshold of tubeness (default = 0). Manual startpoints are generated by the "startpoint" command, followed by the x and y coordinate of the startpoint. A arbitrary number of manual startpoins can be created.

auto_startpoint

#startpoint 100 100



# Saving parameters extracted from the tracing data is done by the four commands "save_loop_areas", "save_loop_circumferences", "save_all_junction_distances" and "save_loop_junction_distances". Here only save_loop_areas can be called more than once since it takes a parameter apart from the path the data will be saved to. The parameter is the assumed fiber thickness and its default is 0. These commands are explained in more detail in the README.md

#save_loop_areas <imagename>_areas_thickness.dat 1 fiber_diameter
#save_loop_areas <imagename>_areas.dat
#save_loop_circumferences <imagename>_circumferences.dat
#save_loop_diameters <imagename>_diameters.dat
#save_all_junction_distances <imagename>_all_junc_dist.dat
#save_loop_junction_distances <imagename>_loop_junc_dist.dat


#Saving the raw tracing data is also possible. Again those commands are described more detailed in the README.md. It should be noted that in the examples here, the folder "raw_data" has to already exist in order for the data to be saved.

#save_tracing_data ./raw_data/<imagename>_tracing.dat
#save_loop_data ./raw_data/<imagename>_loops.dat


#The animate tracing command can be used to generate a animation of the tracing. For best results use only 1 startpoint. The one argument is the line thickness.

#animate_tracing 1
